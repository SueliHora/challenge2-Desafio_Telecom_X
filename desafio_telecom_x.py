# -*- coding: utf-8 -*-
"""Desafio_Telecom_X.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ViyKMPJpOXVGAuYooJKVDlItKjuTqtmq
"""

# Importando as bibliotecas necessárias
import pandas as pd

# Carregando o dataset a partir da URL
url = 'https://raw.githubusercontent.com/ingridcristh/challenge2-data-science/main/TelecomX_Data.json'
df = pd.read_json(url)

# Verificando se os dados foram carregados corretamente
print("Dados carregados com sucesso!")
df.head()

# Analisando os tipos de dados e valores nulos.
df.info()

# Normalizando as colunas aninhadas (tipo JSON) para expandi-las em novas colunas
df_customer = pd.json_normalize(df['customer'])
df_phone = pd.json_normalize(df['phone'])
df_internet = pd.json_normalize(df['internet'])
df_account = pd.json_normalize(df['account'])

# Juntando os novos dataframes ao dataframe original
df_final = pd.concat([df, df_customer, df_phone, df_internet, df_account], axis=1)

# Verificando o resultado da junção
df_final.head()

# Removendo as colunas originais que foram normalizadas, pois agora são redundantes
df_final.drop(columns=['customer', 'phone', 'internet', 'account'], inplace=True)

# Verificando a remoção das colunas
df_final.head()

# Verificando a estrutura final do DataFrame
df_final.info()

# Corrigindo o Dtype da coluna 'Charges.Total'
# Converte para numérico, transforma erros em NaN e depois remove as linhas com NaN.
df_final['Charges.Total'] = pd.to_numeric(df_final['Charges.Total'], errors='coerce')
df_final.dropna(inplace=True)

# Verificando o resultado da limpeza
print("Verificação final dos tipos e valores ausentes:")
df_final.info()

# Padronizando a coluna alvo 'Churn' para formato numérico (0 = No, 1 = Yes)
df_final['Churn'] = df_final['Churn'].replace({'Yes': 1, 'No': 0})

# Verificando a transformação da coluna
print("Coluna 'Churn' corrigida e padronizada:")
df_final[['customerID', 'Churn']].head()

# Gerando um resumo estatístico das variáveis numéricas
df_final.describe()

# Importando bibliotecas de visualização
import matplotlib.pyplot as plt
import seaborn as sns

# Criando o gráfico para visualizar a distribuição da variável alvo 'Churn'
sns.countplot(x='Churn', data=df_final)

# Adicionando título e exibindo o gráfico
plt.title('Distribuição da Evasão de Clientes (0 = Ficou, 1 = Saiu)')
plt.show()

# Análise da evasão de clientes em relação ao tipo de contrato
sns.countplot(x='Contract', hue='Churn', data=df_final)

# Adicionando título e exibindo o gráfico
plt.title('Evasão de Clientes por Tipo de Contrato')
plt.show()

# Análise da evasão de clientes em relação à fatura mensal
sns.boxplot(x='Churn', y='Charges.Monthly', data=df_final)

# Adicionando título e exibindo o gráfico
plt.title('Distribuição da Fatura Mensal por Clientes que Ficaram vs. Saíram')
plt.show()

# Tratando valores anômalos em 'Churn' antes de recriar a visualização
df_final = df_final[df_final['Churn'] != '']

# Recriando o boxplot com os dados agora limpos
sns.boxplot(x='Churn', y='Charges.Monthly', data=df_final)
plt.title('Distribuição da Fatura Mensal (Dados Corrigidos)')
plt.show()

"""# Relatório Final - Análise de Churn da Telecom X

## 1. Introdução
O objetivo deste projeto foi analisar os dados de clientes da empresa fictícia Telecom X para entender os principais fatores que levam à evasão de clientes (churn). Compreender esses motivos é o primeiro passo para criar estratégias eficazes de retenção e garantir a saúde financeira da empresa.

## 2. Limpeza e Preparação dos Dados
Os dados foram carregados a partir de um arquivo JSON. O primeiro passo foi normalizar os dados, desempacotando colunas aninhadas para que todas as informações ficassem visíveis. Em seguida, foi realizado um processo de limpeza, onde a coluna 'Charges.Total' foi convertida para formato numérico e as linhas com dados ausentes foram removidas. Por fim, a coluna alvo 'Churn' foi padronizada para valores numéricos (0 para 'Não' e 1 para 'Sim') para facilitar a análise.

## 3. Análise Exploratória e Insights
A análise exploratória revelou os seguintes padrões:

* **Taxa de Evasão Geral:** A empresa possui uma taxa de evasão de aproximadamente 27%.
* **Impacto do Contrato:** O fator mais influente no churn é o tipo de contrato. Clientes com **contrato mensal** apresentam uma taxa de cancelamento drasticamente maior em comparação com clientes de contratos anuais.
* **Impacto da Fatura Mensal:** Clientes que cancelam o serviço pagam, em média, uma **fatura mensal mais elevada** do que os clientes que permanecem na empresa.

## 4. Conclusões e Recomendações
**Conclusão:** O perfil de maior risco de evasão é o cliente com contrato do tipo mensal e que paga uma fatura mensal mais alta. A falta de um compromisso de longo prazo, combinada com um custo mais elevado, parece ser a principal motivadora para o cancelamento.

**Recomendações:**
1.  **Fidelização de Contratos:** Criar campanhas de marketing e oferecer descontos agressivos para que clientes de contrato mensal migrem para planos de 1 ou 2 anos.
2.  **Revisão de Planos:** Analisar a estrutura de valor dos planos mais caros. É preciso garantir que os benefícios oferecidos (velocidade da internet, canais de TV, etc.) justifiquem o preço mais alto na percepção do cliente.
3.  **Ações Preditivas:** Utilizar os insights desta análise para alimentar um modelo de Machine Learning que possa prever, com antecedência, quais clientes têm maior probabilidade de cancelar, permitindo ações de retenção proativas.
"""

# Salvando o DataFrame final em um arquivo CSV para a Parte 2
df_final.to_csv('dados_tratados.csv', index=False)

print("\nArquivo 'dados_tratados.csv' salvo com sucesso!")